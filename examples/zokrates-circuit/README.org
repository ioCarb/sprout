* compile circuit
Download the zokrates-cli from <https://github.com/Zokrates/ZoKrates/releases/> to compile your `root.zok` and perform the setup phase.
There are two example =.zok= programs a basic =root.zok= and a more complex =hash.zok= from the [[https://zokrates.github.io/examples/rng_tutorial.html#reveal-a-single-bit][ZoKrates manual]].

** compile root.zok
#+begin_src bash
  ./zokrates compile --stdlib-path stdlib -i root.zok
#+end_src
** perform the setup phase
#+begin_src bash
  ./zokrates setup
#+end_src
#+begin_quote
For a universal proving scheme like ~Marlin~ you would also need to do a universal setup beforehand.
#+end_quote
* create a config file using ioctl:
the order doesn't matter and the default values for =-p= and =-k= are the same as below so feel free to not set these options
the =-e= field field is used for the proving scheme. Just use ~ioctl ws procject config --help~ for help

#+begin_src bash
  ioctl ws project config -t "zokrates" -i out -e "g16" -p proving.key -k verification.key
#+end_src

copy the output config (default: =zokrates-config.json=) to =test/projects/20000=

#+begin_quote
currently the zokrates grpc server only accepts messages smaller then 15GB, so with message size = verify.key + proving.key + out, this could be changed tho.
#+end_quote

* send data
change the project-ids depending on what you chose above
** for the =root.zok=
#+begin_src bash
  ioctl ws message send --project-id 20000 --project-version "0.1" --data "337 113569"
#+end_src
** for the =hash.zok=
#+begin_src bash
  ioctl ws message send --project-id 20001 --project-version "0.1" --data "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 510"
#+end_src
and look at the output of the docker log to see the generated proof

* verify proof locally
the sprout ZoKrates-prover will generate a witness and generate a proof in =json=. To verify the proof you can write it to =proof.json= and do:
#+begin_src bash
  ./zokrates verify
#+end_src
